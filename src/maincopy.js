// –Ü–º–ø–æ—Ä—Ç –∑ node_modules
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { CSS2DRenderer, CSS2DObject } from 'three/examples/jsm/renderers/CSS2DRenderer.js';

// –°—Ü–µ–Ω–∞
const scene = new THREE.Scene();
scene.background = new THREE.Color(0xffffff);

// –ö–∞–º–µ—Ä–∞
const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.set(2, 2, 4);

// –†–µ–Ω–¥–µ—Ä–µ—Ä
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

//CSS2D Render
const labelRenderer = new CSS2DRenderer();
labelRenderer.setSize(window.innerWidth, window.innerHeight);
labelRenderer.domElement.style.position = 'absolute';
labelRenderer.domElement.style.top = '0';
labelRenderer.domElement.style.pointerEvents = 'none';
document.body.appendChild(labelRenderer.domElement);


// –°–≤—ñ—Ç–ª–æ
const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
scene.add(hemiLight);

const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
dirLight.position.set(3, 10, 10);
scene.add(dirLight);

// –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä
const controls = new OrbitControls(camera, renderer.domElement);
controls.target.set(0, 0, 0);
controls.update();

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
const loader = new GLTFLoader();
loader.load('/model.glb', (gltf) => {
  scene.add(gltf.scene);
  console.log('‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
}, undefined, (err) => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', err);
});

// –ê–Ω—ñ–º–∞—Ü—ñ—è
function animate() {
  requestAnimationFrame(animate);
  controls.update();
  renderer.render(scene, camera);
}
//–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ—î–∫—Ü—ñ—ó 3D-—Ç–æ—á–∫–∏ –≤ 2D –µ–∫—Ä–∞–Ω
animate();
function toScreenPosition(obj, camera) {
  const vector = new THREE.Vector3();
  const widthHalf = window.innerWidth / 2;
  const heightHalf = window.innerHeight / 2;

  obj.updateMatrixWorld();
  vector.setFromMatrixPosition(obj.matrixWorld);
  vector.project(camera);

  return {
    x: (vector.x * widthHalf) + widthHalf,
    y: -(vector.y * heightHalf) + heightHalf
  };
}


//–ê–Ω–æ—Ç–∞—Ü—ñ—è
loader.load('/model.glb', (gltf) => {
  const model = gltf.scene;
  scene.add(model);

  const label = document.createElement('img');
label.src = '/icons/custom-icon.svg';
label.className = 'annotation';
const labelObj = new CSS2DObject(label);
target.add(labelObj);
labelObj.position.set(0, 0.2, 0);  // —Ç—Ä–æ—Ö–∏ –≤–∏—â–µ –≤—É–∑–ª–∞

  //Render
  renderer.render(scene, camera);
labelRenderer.render(scene, camera);


  // üîΩ –°—Ç–≤–æ—Ä–∏–º–æ –∞–Ω–æ—Ç–∞—Ü—ñ—é
  const annotationEl = document.createElement('div');
  annotationEl.className = 'annotation';
  annotationEl.title = '–¶—ñ–∫–∞–≤–∞ —Ç–æ—á–∫–∞';
  document.getElementById('annotations-container').appendChild(annotationEl);

  // ‚ùóÔ∏è–¶—è —Ç–æ—á–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥–µ—Å—å –≤ –º–µ–∂–∞—Ö —Å—Ü–µ–Ω–∏:
  const targetObject = model.getObjectByName('–ù–∞–∑–≤–∞Mesh–ê–±–æNode');
  if (!targetObject) {
    console.warn('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—É–∑–æ–ª –¥–ª—è –∞–Ω–æ—Ç–∞—Ü—ñ—ó');
    return;
  }

  // üîÅ –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∞–Ω–æ—Ç–∞—Ü—ñ—ó –∫–æ–∂–µ–Ω –∫–∞–¥—Ä
  function updateAnnotation() {
    const pos = toScreenPosition(targetObject, camera);
    annotationEl.style.left = `${pos.x}px`;
    annotationEl.style.top = `${pos.y}px`;
  }

  // –î–æ–¥–∞—î–º–æ –¥–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó
  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
    updateAnnotation(); // <-- —Ç—É—Ç!
  }

  animate();
});


// Resize
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
